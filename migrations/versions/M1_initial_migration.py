"""Initial migration; create users and oauth tables.

Revision ID: M1
Revises:
Create Date: YYYY-MM-DD HH:MM:SS.ffffff

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'M1' # Replace with actual auto-generated revision id
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('google_id', sa.String(length=255), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('profile_pic_url', sa.String(length=512), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('google_id')
    )
    op.create_table('flask_dance_oauth', # Default table name for OAuthConsumerMixin if not specified
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False), # From OAuthConsumerMixin
    sa.Column('created_at', sa.DateTime(), nullable=False),      # From OAuthConsumerMixin
    sa.Column('token', sa.JSON(), nullable=False),               # From OAuthConsumerMixin
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # If you chose a specific tablename for OAuth in models.py like `oauth_tokens`, use that here.
    # Default is `flask_dance_oauth` if OAuth model doesn't specify __tablename__.
    # Our OAuth model in models.py doesn't specify a tablename, so it defaults to 'oauth'.
    # Let's assume the default for OAuthConsumerMixin is 'flask_dance_oauth' or it uses model name 'oauth'.
    # Re-checking Flask-Dance docs: it uses the model's __tablename__ or infers one.
    # If our model is `class OAuth(OAuthConsumerMixin, db.Model):`, table name will be `oauth`.
    # So, the table name should be 'oauth'. I'll correct this.

    # Corrected OAuth table creation:
    # op.drop_table('flask_dance_oauth') # If the above was mistakenly assumed
    # op.create_table('oauth',  # Assuming model name 'OAuth' becomes table 'oauth'
    # sa.Column('id', sa.Integer(), nullable=False),
    # sa.Column('provider', sa.String(length=50), nullable=False),
    # sa.Column('created_at', sa.DateTime(), nullable=False),
    # sa.Column('token', sa.JSON(), nullable=False),
    # sa.Column('user_id', sa.Integer(), nullable=False),
    # sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    # sa.PrimaryKeyConstraint('id')
    # )
    # Actually, looking at OAuthConsumerMixin, it does not define `id` as PK itself,
    # it's expected to be defined in the inheriting class.
    # Our `OAuth` model in `models.py` is:
    # class OAuth(OAuthConsumerMixin, db.Model):
    # user_id = db.Column(db.Integer, db.ForeignKey(User.id), nullable=False)
    # user = db.relationship(User, backref=db.backref("oauth_credentials", lazy='dynamic'))
    # It inherits id, provider, created_at, token from OAuthConsumerMixin.
    # The default table name for `class OAuth` would be `oauth`.

    # Let's ensure the table name in the migration matches how SQLAlchemy generates it for the OAuth model.
    # If OAuth model is `class OAuth(OAuthConsumerMixin, db.Model):`, table name is `oauth`.
    # The `OAuthConsumerMixin` provides `id` as a primary key.

    # The `flask_dance_oauth` table created above is actually correct if the model class was named `FlaskDanceOAuth`.
    # Since our model is named `OAuth`, the table name should be `oauth`.

    # Let's assume the auto-generated script by `flask db migrate` would correctly deduce table names.
    # The script above for 'users' is fine. For 'oauth', it would be based on the `OAuth` model.
    # If `OAuth.__tablename__` is not set, it defaults to `oauth`.
    # `OAuthConsumerMixin` itself has `id = Column(Integer, primary_key=True)`

    # The provided create_table for 'flask_dance_oauth' seems to be a common default name if
    # the SQLAlchemyStorage is used without a custom model that explicitly sets __tablename__.
    # However, we provided `OAuth` model to `SQLAlchemyStorage`.
    # So, the table name should be `oauth`.

    # Correcting the OAuth table part based on our `OAuth` model in `models.py`:
    op.execute('DROP TABLE IF EXISTS flask_dance_oauth;') # Clean up if previous assumption was wrong
    op.create_table('oauth', # Table name derived from class OAuth
        sa.Column('id', sa.Integer(), nullable=False), # This comes from OAuthConsumerMixin
        sa.Column('provider', sa.String(length=50), nullable=False), # From OAuthConsumerMixin
        sa.Column('created_at', sa.DateTime(), nullable=False), # From OAuthConsumerMixin
        sa.Column('token', sa.JSON(), nullable=False), # From OAuthConsumerMixin
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id') # id is PK in OAuthConsumerMixin
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('oauth') # Corrected table name
    op.drop_table('users')
    # ### end Alembic commands ###
